<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
	xmlns:aop="http://www.springframework.org/schema/aop"  
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/jdbc 
		http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	
	<import	resource="spring-pid.xml" />
	<!--<import	resource="spring-quatrz.xml" />
	--><!--  import	resource="rest-context.xml" />-->
	<!--  import	resource="rest-servlet.xml" />-->
		<!-- 以下的两个方法用来获取 springcontext 和 servletcontext  -->
	<bean class="com.livechain.pid.util.SpringContextUtil" />
	<bean class="com.livechain.pid.util.SpringServletContextUtil" />
		
		<!--axis2 相关的类-->
	<bean id="applicationContext"
		  class="org.apache.axis2.extensions.spring.receivers.ApplicationContextHolder" />
		  
		
        <context:component-scan base-package="com.livechain">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
		<!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver" />
		<property name="url" value="jdbc:sqlserver://192.168.0.187:3306;DatabaseName=empi" />
		<property name="username" value="sa" />
		<property name="password" value="live@123" />
		<property name="defaultAutoCommit" value="false" />
	    </bean>
	
	--><bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://192.168.0.187:3306/empi?useUnicode=true&amp;characterEncoding=utf8" />
		<property name="username" value="root" />
		<property name="password" value="adminadmin" />
		<property name="defaultAutoCommit" value="false" />
	</bean>
   		
   
   
	
	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/mytatis-conf.xml" />
		<!-- 自动扫描model目录, 省掉Configuration.xml里的手工配置  -->
	    <property name="typeAliasesPackage" value="com.livechain.mybatis.model" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:com/livechain/mybatis/mapper/*Mapper.xml" />
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.livechain.mybatis.dao" />
		<property name="annotationClass" value="com.livechain.mybatis.dao.MyBatisRepository"/>
	</bean>
	
	<!-- <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">  
        <property name="transactionManager" ref="transactionManager"></property>  
        <property name="transactionAttributes">  
            <props>  
                   PROPAGATION_SUPPORTS: 如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行;   
                PROPAGATION_MANDATORY: 使用当前事务, 如果没有, 则抛出异常;   
                PROPAGATION_REQUIRED: 新建事务,如果当前有事务, 则挂起; P  
                ROPAGATION_NOT_SUPPORTED:以非事务的方式执行, 如果当前有事务, 则挂起;   
                PROPAGATION_NEVER:以非事务的方式执行, 如果当前有事务,则抛出异常;   
                +/-Exception</prop> + 表示异常出现时事物提交 - 表示异常出现时事务回滚   
                <prop key="mergerpersons">PROPAGATION_REQUIRED,-Exception</prop>  
                <prop key="personadd"> PROPAGATION_REQUIRED,-Exception</prop>  
                <prop key="personchange">PROPAGATION_REQUIRED,-Exception</prop>  
                <prop key="personlock">PROPAGATION_REQUIRED,-Exception</prop>  
                <prop key="personunlock">PROPAGATION_REQUIRED,-Exception</prop>  
                
            </props>  
        </property>  
    </bean>  -->
    
    
    <!-- 事务管理器配置, Jdbc单数据源事务 -->
   <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
   </bean>
   
	<!-- 定义 加事务的方法 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="personadd" propagation="REQUIRED" />
            <tx:method name="personchange" propagation="REQUIRED" />
            <tx:method name="personlock" propagation="REQUIRED" />
            <tx:method name="personunlock" propagation="REQUIRED" />
            <tx:method name="saveQueueData" propagation="REQUIRED" /> 
        </tx:attributes>
    </tx:advice>
<!-- 定义 加事务的类 -->   
    <aop:config>
        <aop:pointcut id="interceptorPointCuts"
            expression="execution(* com.livechain.pid.rest.service.*.*(..))" />
        <aop:advisor advice-ref="txAdvice"
            pointcut-ref="interceptorPointCuts" />       
    </aop:config>      
    
</beans>


